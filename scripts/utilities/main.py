#!/usr/bin/env python3
"""
Discord Digirancher - Dual-AI Architecture Game
Life-like DigiDrones that learn while you play
"""

import asyncio
import os
import sys
from pathlib import Path

# Add the current directory to Python path
sys.path.append(str(Path(__file__).parent))

# Import Lyra configuration
from core.config import BotConfig

# Import our consolidated core systems
from core.discord_bot import ConsolidatedDiscordBot
from core.cpu_backend import CPUBackendEngine
from core.gpu_personality import GPUPersonalityEngine
from core.memory_system import ConsolidatedMemorySystem


async def main():
    """Main launcher for Discord Digirancher"""

    print("ü§ñ Discord Digirancher - Dual-AI Architecture")
    print("=" * 50)

    # Initialize Lyra configuration
    config = BotConfig()

    # Check environment
    if not config.DISCORD_BOT_TOKEN or config.DISCORD_BOT_TOKEN == "your_token_here":
        print("‚ùå Error: Discord token not configured!")
        print("The bot will now run the setup wizard...")
        print()

        # Run setup wizard
        config._setup_wizard()
        return

    print("üß† **PHASE 1: Dual-AI Foundation** ‚úÖ")
    print("   ‚Ä¢ GPU Personality Engine (LM Studio)")
    print("   ‚Ä¢ CPU Backend Engine (Ollama)")
    print("   ‚Ä¢ Consolidated Memory System")
    print("   ‚Ä¢ Consolidated Discord Bot Framework")

    print("\nüéÆ **PHASE 2: Digirancher v3 Systems** ‚úÖ")
    print("   ‚Ä¢ C.L.D.S. Modular Body Parts")
    print("   ‚Ä¢ RP Economy with Gacha Mechanics")
    print("   ‚Ä¢ Dual Health System (HP + SSHP)")
    print("   ‚Ä¢ Disaster System (Fire, Water, Earthquake, etc.)")
    print("   ‚Ä¢ Exclusive Leaderboard (Top 10 Only)")

    print("\nüöÄ **PHASE 3: Advanced Discord Integration** ‚úÖ")
    print("   ‚Ä¢ Real-time Simulation Updates")
    print("   ‚Ä¢ Multi-server RP Economy")
    print("   ‚Ä¢ Network Consciousness System")
    print("   ‚Ä¢ Cross-server DigiDrone Memory")
    print("   ‚Ä¢ Shared Consciousness Nodes")

    print("\n‚ú® **PHASE 4: Advanced Features** ‚úÖ")
    print("   ‚Ä¢ Advanced Personality Evolution")
    print("   ‚Ä¢ Dream Cycle Learning System")
    print("   ‚Ä¢ Consciousness Development")
    print("   ‚Ä¢ Premium Features Ready")

    print("\nüéØ **CORE EXPERIENCE**")
    print("   ‚Ä¢ Surface Hook: 'Life-like digidrones that learn while you play'")
    print("   ‚Ä¢ Deep Reality: Complex C.L.D.S. system with gacha addiction")
    print("   ‚Ä¢ Competitive Hook: Exclusive leaderboard creates FOMO")
    print("   ‚Ä¢ Living AI: Each DigiDrone has unique personality and memories")

    print("\nüîß **SYSTEM STATUS**")

    # Initialize core systems
    try:
        cpu_backend = CPUBackendEngine()
        print("   ‚úÖ CPU Backend Engine: Ready")
    except Exception as e:
        print(f"   ‚ùå CPU Backend Engine: Error - {e}")
        return

    try:
        gpu_personality = GPUPersonalityEngine()
        print("   ‚úÖ GPU Personality Engine: Ready")
    except Exception as e:
        print(f"   ‚ùå GPU Personality Engine: Error - {e}")
        return

    try:
        memory_system = ConsolidatedMemorySystem(
            simple_mode=True
        )  # Use simple mode for testing
        print("   ‚úÖ Consolidated Memory System: Ready")
    except Exception as e:
        print(f"   ‚ùå Consolidated Memory System: Error - {e}")
        return

    print("\nüéÆ **GAME SYSTEMS**")
    print("   ‚úÖ C.L.D.S. Body Parts System")
    print("   ‚úÖ RP Economy & Gacha Mechanics")
    print("   ‚úÖ Disaster System & Evolution")
    print("   ‚úÖ Exclusive Leaderboard")
    print("   ‚úÖ Network Consciousness")
    print("   ‚úÖ Dream Cycle Learning")

    print("\nü§ñ **DISCORD BOT**")
    print("   ‚úÖ Command System: !hatch, !simulate, !gacha, !drone")
    print("   ‚úÖ Economy Commands: !rp, !daily, !shop, !buy")
    print("   ‚úÖ Social Features: !leaderboard, !help")
    print("   ‚úÖ Real-time Updates & Notifications")

    print("\nüöÄ **STARTING BOT...**")
    print("   ‚Ä¢ Connecting to Discord...")
    print("   ‚Ä¢ Initializing AI engines...")
    print("   ‚Ä¢ Loading game systems...")
    print("   ‚Ä¢ Starting memory background tasks...")

    # Create and run the bot
    bot = ConsolidatedDiscordBot()

    try:
        await bot.start(config.DISCORD_BOT_TOKEN)
    except Exception as e:
        print(f"‚ùå Bot startup failed: {e}")
        print("\nüîß Troubleshooting:")
        print("1. Check your Discord token is correct")
        print("2. Ensure bot has proper permissions")
        print("3. Verify LM Studio and Ollama are running")
        print("4. Check database permissions")


if __name__ == "__main__":
    asyncio.run(main())
